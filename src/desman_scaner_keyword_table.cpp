/*
  Основано на работе Гаврилова Владимира Сергеевича
*/

#include "../include/desman_scaner_keyword_table.h"

namespace desman_scanner{
    const trans_table::Elem<Lexem_code> keywords_jump_table[] = {
        {const_cast<char32_t*>(U"nr"),   Lexem_code::Id,                 1}, // 0:   a...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,                 3}, // 1:   an...
        {const_cast<char32_t*>(U"r"),    Lexem_code::Id,                 4}, // 2:   ar...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_anl,                 0}, // 3:   anl
		{const_cast<char32_t*>(U"a"),    Lexem_code::Id,                 5}, // 4:   arr...
		{const_cast<char32_t*>(U"y"),    Lexem_code::Id,                 6}, // 5:   arra...
		{const_cast<char32_t*>(U""),    Lexem_code::Kw_arrray,                 0}, // 6:   array
		
        {const_cast<char32_t*>(U"i"), Lexem_code::Id,           8}, // 7:   b...
        {const_cast<char32_t*>(U"g"),    Lexem_code::Id,                9}, // 8:   bi...
        {const_cast<char32_t*>(U""),   Lexem_code::Kw_big,                0}, // 9:   big
		
        {const_cast<char32_t*>(U"1368hlo"),    Lexem_code::Kw_c,                11}, // 10:  c...
        {const_cast<char32_t*>(U"2"),    Lexem_code::Id,                18}, // 11:  c1...
        {const_cast<char32_t*>(U"2"),     Lexem_code::Id,          19}, // 12:  c3...
        {const_cast<char32_t*>(U"4"),    Lexem_code::Id,                20}, // 13:  c6...
        {const_cast<char32_t*>(U"0"),    Lexem_code::Id,                21}, // 14:  c8...
        {const_cast<char32_t*>(U"o"),     Lexem_code::Id,         22}, // 15:  ch...
        {const_cast<char32_t*>(U"e"),     Lexem_code::Id,         23}, // 16:  cl...
        {const_cast<char32_t*>(U"n"),     Lexem_code::Id,         24}, // 17:  co...
        {const_cast<char32_t*>(U"8"),     Lexem_code::Id,         25}, // 18:  c12...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_c32,        0}, // 19:  c32
        {const_cast<char32_t*>(U""),  Lexem_code::Kw_c64,                0}, // 20:  c64
        {const_cast<char32_t*>(U""),   Lexem_code::Kw_c80,                0}, // 21: c80 
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_cho,                0}, // 22:  cho
        {const_cast<char32_t*>(U"a"),  Lexem_code::Id,                26}, // 23:  cle...
        {const_cast<char32_t*>(U"ts"),    Lexem_code::Id,                27}, // 24:  con...
        {const_cast<char32_t*>(U""), Lexem_code::Kw_c128,         0}, // 25:  c128
        {const_cast<char32_t*>(U"n"),    Lexem_code::Id,                29}, // 26:  clea...
        {const_cast<char32_t*>(U"i"),    Lexem_code::Id,                30}, // 27:  cont...
        {const_cast<char32_t*>(U"t"),    Lexem_code::Id,                31}, // 28:  cons...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_clean,                0}, // 29:  clean
        {const_cast<char32_t*>(U"n"),    Lexem_code::Id,                32}, // 30:  conti...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_const,                0}, // 31:  const
        {const_cast<char32_t*>(U"u"),    Lexem_code::Id,                33}, // 32:  contin...
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,                34}, // 33:  continu...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_continue,                0}, // 34:  continue
		
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,                36}, // 35:  d...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,                37}, // 36:  de...
        {const_cast<char32_t*>(U"i"),    Lexem_code::Id,                38}, // 37:  del...
        {const_cast<char32_t*>(U"v"),    Lexem_code::Id,                39}, // 38:  deli...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_deliv,          0}, // 39:  deliv
		
        {const_cast<char32_t*>(U"lmx"),    Lexem_code::Id,                41}, // 40:  e...
        {const_cast<char32_t*>(U"s"),     Lexem_code::Id,        44}, // 41:  el...
        {const_cast<char32_t*>(U"p"),     Lexem_code::Id,        45}, // 42:  em...
        {const_cast<char32_t*>(U"t"),     Lexem_code::Id,        46}, // 43:  ex...
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,                47}, // 44:  els...
        {const_cast<char32_t*>(U"t"),    Lexem_code::Id,                48}, // 45:  emp...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_ext,                0}, // 46:  ext
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_else,           0}, // 47:  else
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_empt,       0}, // 48:  empt
	
        {const_cast<char32_t*>(U"aoru"),    Lexem_code::Id,                50}, // 49:  f...
        {const_cast<char32_t*>(U"l"),     Lexem_code::Id,          54}, // 50:  fa...
        {const_cast<char32_t*>(U"r"),    Lexem_code::Id,                55}, // 51:  fo...
        {const_cast<char32_t*>(U"v"),     Lexem_code::Id,         56}, // 52:  fr...
        {const_cast<char32_t*>(U"n"),    Lexem_code::Id,                57}, // 53:  fu...
        {const_cast<char32_t*>(U"s"),    Lexem_code::Id,                58}, // 54:  fal...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_for,       0}, // 55:  for
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_frv,                0}, // 56:  frv
        {const_cast<char32_t*>(U"c"),    Lexem_code::Id,                59}, // 57:  fun...
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,                60}, // 58:  fals...
        {const_cast<char32_t*>(U"t"),    Lexem_code::Id,                61}, // 59:  func...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_false,                0}, // 60:  false
        {const_cast<char32_t*>(U"i"),    Lexem_code::Id,                62}, // 61:  funct...
        {const_cast<char32_t*>(U"o"),    Lexem_code::Id,                63}, // 62:  functi...
        {const_cast<char32_t*>(U"n"),     Lexem_code::Id,       64}, // 63:  functio...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_function,                0}, // 64:  function
		
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,                66}, // 65:  h...
        {const_cast<char32_t*>(U"a"),     Lexem_code::Id,            67}, // 66: he...
        {const_cast<char32_t*>(U"d"),    Lexem_code::Id,                68}, // 67:  hea...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_head,                0}, // 68:  head...
		
        {const_cast<char32_t*>(U"fn"),    Lexem_code::Id,                70}, // 69:  i...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_if,            0}, // 70:  if
        {const_cast<char32_t*>(U"f"),   Lexem_code::Id,                72}, // 71:  in...
        {const_cast<char32_t*>(U""),   Lexem_code::Kw_ins,                0}, // 72:  ins
		
        {const_cast<char32_t*>(U"i"),    Lexem_code::Id,                74}, // 73:  k...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,                75}, // 74:  ki...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,                76}, // 75:  kil...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_kill,                0}, // 76:  kill
		
        {const_cast<char32_t*>(U"io"),    Lexem_code::Id,                78}, // 77:  l...
        {const_cast<char32_t*>(U"n"),     Lexem_code::Id,            80}, // 78:  li..
        {const_cast<char32_t*>(U"g"),    Lexem_code::Id,                81}, // 79:  lo...
        {const_cast<char32_t*>(U"k"),     Lexem_code::Id,          82}, // 80:  lin...
        {const_cast<char32_t*>(U"1368"),    Lexem_code::Kw_log,                86}, // 81:  log...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_link,          0}, // 82:  link
        {const_cast<char32_t*>(U"8"),    Lexem_code::Id,                87}, // 83:  log1...
        {const_cast<char32_t*>(U"2"),   Lexem_code::Id,                88}, // 84:  log3...
        {const_cast<char32_t*>(U"4"),    Lexem_code::Id,                89}, // 85:  log6...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_log8,                0}, // 86:  log8
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_log16,                0}, // 87:  log16
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_log32,                0}, // 88:  log32
        {const_cast<char32_t*>(U""), Lexem_code::Kw_log64,          0}, // 89:  log64
		
        {const_cast<char32_t*>(U"0"),     Lexem_code::Id,           91}, // 90:  m...
        {const_cast<char32_t*>(U"d"),    Lexem_code::Id,                92}, // 91:  mo...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_mod,                0}, // 92:  mod
		
        {const_cast<char32_t*>(U"u"),    Lexem_code::Id,                94}, // 93:  n...
        {const_cast<char32_t*>(U"m"),    Lexem_code::Id,                95}, // 94:  nu...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_num,                0}, // 95:  num
		
        {const_cast<char32_t*>(U"r"),     Lexem_code::Id,         97}, // 96:  p...
        {const_cast<char32_t*>(U"o"),     Lexem_code::Id,         98}, // 97:  pr...
        {const_cast<char32_t*>(U"p"),     Lexem_code::Id,         99}, // 98:  pro...
        {const_cast<char32_t*>(U"a"),     Lexem_code::Id,        100}, // 99:   prop...
        {const_cast<char32_t*>(U"g"),    Lexem_code::Id,               101}, // 100: propa...
        {const_cast<char32_t*>(U"a"),   Lexem_code::Id,               102}, // 101: propag...
        {const_cast<char32_t*>(U"n"), Lexem_code::Id,           103}, // 102: propaga...
        {const_cast<char32_t*>(U"d"),    Lexem_code::Id,               104}, // 103: propagan...
        {const_cast<char32_t*>(U"a"),    Lexem_code::Id,               105}, // 104: propagand...
        {const_cast<char32_t*>(U"1"),    Lexem_code::Id,               106}, // 105: propaganda...
        {const_cast<char32_t*>(U"0"),    Lexem_code::Id,               107}, // 106: propaganda1...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_propaganda10,            0}, // 107: propaganda10
		
        {const_cast<char32_t*>(U"1368e"),     Lexem_code::Kw_r,            109}, // 108: r
        {const_cast<char32_t*>(U"2"),     Lexem_code::Id,           114}, // 109: r1...
        {const_cast<char32_t*>(U"2"),     Lexem_code::Id,           115}, // 110: r3...
        {const_cast<char32_t*>(U"4"),     Lexem_code::Id,           116}, // 111: r6...
        {const_cast<char32_t*>(U"0"),   Lexem_code::Id,               117}, // 112: r8...
        {const_cast<char32_t*>(U"pt"),   Lexem_code::Id,               119}, // 113: re...
        {const_cast<char32_t*>(U"8"),    Lexem_code::Id,               120}, // 114: r12...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_r32,               0}, // 115: r32
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_r64,               0}, // 116: r64
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_r80,               0}, // 117: r80
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_rep,               0}, // 118: rep
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_ret,               0}, // 119: ret
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_r128,               0}, // 120: r128
		
        {const_cast<char32_t*>(U"emty"),    Lexem_code::Id,               122}, // 121: s...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,               126}, // 122: se...
        {const_cast<char32_t*>(U"a"),    Lexem_code::Id,               127}, // 123: sm...
        {const_cast<char32_t*>(U"r"),    Lexem_code::Id,               128}, // 124: st...
        {const_cast<char32_t*>(U"m"),     Lexem_code::Id,          129}, // 125: sy...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_sel,           0}, // 126: sel
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,               130}, // 127: sma...
        {const_cast<char32_t*>(U"iu"),    Lexem_code::Id,               132}, // 128: str...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_sym,        0}, // 129: sym
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,               133}, // 130: smal...
        {const_cast<char32_t*>(U"n"),    Lexem_code::Id,               134}, // 131: stri...
        {const_cast<char32_t*>(U"c"),    Lexem_code::Id,               135}, // 132: stru...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_small,               0}, // 133: small
        {const_cast<char32_t*>(U"g"),     Lexem_code::Id,          136}, // 134: strin...
        {const_cast<char32_t*>(U"t"),    Lexem_code::Id,               137}, // 135: struc...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_string,               0}, // 136: string
        {const_cast<char32_t*>(U"u"),    Lexem_code::Id,               138}, // 137: struct...
        {const_cast<char32_t*>(U"r"),    Lexem_code::Id,               139}, // 138: structu...
        {const_cast<char32_t*>(U"e"),    Lexem_code::Id,               140}, // 139: structur...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_structure,               0}, // 140: structure
		
        {const_cast<char32_t*>(U"hry"),    Lexem_code::Id,               142}, // 141: t...
        {const_cast<char32_t*>(U"a"),    Lexem_code::Id,               145}, // 142: th...
        {const_cast<char32_t*>(U"u"),    Lexem_code::Id,               146}, // 143: tr...
        {const_cast<char32_t*>(U"p"),    Lexem_code::Id,               147}, // 144: ty..
        {const_cast<char32_t*>(U"t"),    Lexem_code::Id,               148}, // 145: tha...
        {const_cast<char32_t*>(U"e"),     Lexem_code::Id,   149}, // 146: tru...
        {const_cast<char32_t*>(U"e"),   Lexem_code::Id,               150}, // 147: typ...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_that,               0}, // 148: that
        {const_cast<char32_t*>(U""),   Lexem_code::Kw_true,               0}, // 149: true
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_type,               0}, // 150: type
		
        {const_cast<char32_t*>(U"n"),    Lexem_code::Id,               152}, // 151: u...
        {const_cast<char32_t*>(U"v"),   Lexem_code::Id,               153}, // 152: un...
        {const_cast<char32_t*>(U"a"),   Lexem_code::Id,               154}, // 153: unv...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,               155}, // 154: unva...
        {const_cast<char32_t*>(U"1368"),     Lexem_code::Kw_unval,          159 }, // 155: unval...
        {const_cast<char32_t*>(U"26"),    Lexem_code::Id,               161}, // 156: unval1...
        {const_cast<char32_t*>(U"2"),     Lexem_code::Id,           162}, // 157: unval3...
        {const_cast<char32_t*>(U"4"),    Lexem_code::Id,               163}, // 158: unval6...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_unval8,               0}, // 159: unval8
        {const_cast<char32_t*>(U"8"),    Lexem_code::Id,               164}, // 160: unval2...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_unval16,               0}, // 161: unval16
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_unval32,               0}, // 162: unval32
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_unval64,          0}, // 163: unval64
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_unval128,               0}, // 164: unval128
		
        {const_cast<char32_t*>(U"a"),    Lexem_code::Id,               166}, // 165: v...
        {const_cast<char32_t*>(U"r"),    Lexem_code::Id,               167}, // 166: va...
        {const_cast<char32_t*>(U""),     Lexem_code::Kw_var,       0}, // 167: var
		
        {const_cast<char32_t*>(U"h"),    Lexem_code::Id,               169}, // 168: w...
        {const_cast<char32_t*>(U"i"),    Lexem_code::Id,               170}, // 169: wh...
        {const_cast<char32_t*>(U"l"),    Lexem_code::Id,               171}, // 170: whi...
        {const_cast<char32_t*>(U"e"),     Lexem_code::Id,   172}, // 171: whil...
        {const_cast<char32_t*>(U"t"),    Lexem_code::Kw_while,               173}, // 172: while...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_whilet,               0}, // 173: whilet...
		
        {const_cast<char32_t*>(U"1368"),    Lexem_code::Kw_z,               175}, // 174: z...
        {const_cast<char32_t*>(U"26"),    Lexem_code::Id,               179}, // 175: z1...
        {const_cast<char32_t*>(U"2"),    Lexem_code::Id,               181}, // 176: z3...
        {const_cast<char32_t*>(U"4"),     Lexem_code::Id,          182}, // 177: z6...
        {const_cast<char32_t*>(U""),  Lexem_code::Kw_z8,               0}, // 178: z8
        {const_cast<char32_t*>(U"8"),    Lexem_code::Id,               183}, // 179: z12...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_z16,               0}, // 180: z16
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_z32,               0}, // 181: z32
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_z64,               0}, // 182: z64
        {const_cast<char32_t*>(U"л"),    Lexem_code::Kw_z128,               0}, // 183: z128
		
        {const_cast<char32_t*>(U"a"),   Lexem_code::Id,               185}, // 184: I...
        {const_cast<char32_t*>(U"m"),     Lexem_code::Id,            186}, // 185: Ia...
        {const_cast<char32_t*>(U""),    Lexem_code::Kw_Iam,               0} // 186: Iam
    
    };
};
